#+title: Scratch Packages
#+export_file_name: ../README.md
#+options: toc:nil broken-links:mark num:nil

#+begin_export html
<!-- !!!THIS FILE HAS BEEN GENERATED!!! Edit README.org -->
#+end_export

#+begin_export html
<!-- a href="https://melpa.org/#/erk"><img src="https://melpa.org/packages/erk-badge.svg" alt="melpa package"></a> <a href="https://stable.melpa.org/#/erk"><img src="https://stable.melpa.org/packages/erk-badge.svg" alt="melpa stable package"></a> -->
<a href="https://github.com/positron-solutions/scratch-pkgs/actions/?workflow=CI"><img src="https://github.com/positron-solutions/scratch-pkgs/actions/workflows/ci.yml/badge.svg" alt="CI workflow status"></a>
<a href="https://github.com/positron-solutions/scratch-pkgs/actions/?workflow=Developer+Certificate+of+Origin"><img src="https://github.com/positron-solutions/scratch-pkgs/actions/workflows/dco.yml/badge.svg" alt="DCO Check"></a>
#+end_export

* Scratch Packages
  :PROPERTIES:
  :UNNUMBERED: notoc
  :END:
#+include: "manual.org::*Scratch Packages" :only-contents t
* Install
  :PROPERTIES:
  :UNNUMBERED: notoc
  :END:
 #+begin_src elisp
   ;; package-vc
   (package-vc-install
    '(scratch-pkgs :url "https://github.com/positron-solutions/scratch-pkgs.git"
          :lisp-dir "lisp"
          :doc "doc/scratch-pkgs.texi"))

   ;; using elpaca's with explicit recipe
   (use-package scratch-pkgs
     :elpaca (scratch-pkgs :host github :repo "positron-solutions/scratch-pkgs"))

   ;; straight with explicit recipe
   (use-package scratch-pkgs
     :straight (scratch-pkgs :type git :host github :repo "positron-solutions/scratch-pkgs"))

   ;; or use manual load-path & require, you brave yak shaver
 #+end_src
 #+toc: headlines 2
 #+include: "manual.org::*Usage" :minlevel 1
* Contributing
  See the [[./CONTRIBUTING.md][CONTRIBUTING]] guide for help making changes to this project.  For
  turn-key contribution to the software ecosystem that keeps you moving, see the
  [[https://github.com/sponsors/positron-solutions][funding links]].

# Local Variables:
# after-save-hook: (lambda () (when (require 'erk nil t) (erk-export-readme)))
# End:
